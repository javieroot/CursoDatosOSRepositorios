all.files=TRUE,
pattern="cortazar",
full.names=TRUE,
recursive=TRUE)
list.files(path="Y:/fedora/data/datastreamStore",
all.files=TRUE,
pattern="cortazar",
full.names=TRUE,
recursive=TRUE)
repofilescortazar<- list.files(path="Y:/fedora/data/datastreamStore",
all.files=TRUE,
pattern="cortazar",
full.names=TRUE,
recursive=TRUE)
head(repofilescortazar)
JPG <- grep("JPG",repofilescortazar)
head(repofilescortazar,25)
TN <- grep("TN",repofilescortazar)
PDF <- grep("PDF",repofilescortazar)
MP3 <- grep("MP3",repofilescortazar)
MED <- grep("MED",repofilescortazar)
MODS <- grep("MODS",repofilescortazar)
head(repofilescortazar,50)
SWF <- grep("SWF",repofilescortazar)
RELSEXT <- grep("RELS-EXT",repofilescortazar)
Images <- length(JPG)+length(TN)+length(MED)
length(JPG)
length(TN)
length(MED)
library(RODBC)
# Conexión con SQL Server utilizando OCDBC
odbcChannel <- odbcConnect("Reservas")
odbcGetInfo(odbcChannel)
p <- sqlQuery(odbcChannel, "select * from information_schema.tables") # todas las tablas
## RESERVAS-----------------------------------------------------------------------------------------------------
# Sacamos datos de reservas
reservasInfo <- sqlQuery(odbcChannel, "select * from reservas.vw_Todas_Las_Reservas") # reservas info
# Limpiamos los datos de reservas
reservasInfo <- reservasInfo[,c(1,2,4,5,6,7,8,9,14,27,28)]
# Juntamos idActo y Nombre para las agrupaciones posteriores
reservasInfo$idActoyNombre <- paste(reservasInfo$idActo,"-",reservasInfo$Acto_Nombre)
# Filtramos por fecha
reservasInfo <- reservasInfo [ order(reservasInfo$Acto_Fecha, decreasing=TRUE),]
reservasInfo <- subset (reservasInfo, Reserva_Fecha < as.POSIXct("2014-12-01 00:00:00"))
reservasInfo <- subset (reservasInfo, Acto_Fecha < as.POSIXct("2014-12-01 00:00:00"))
Total_Actos <- nlevels(as.factor(reservasInfo$idActo))
Total_Butacas_Reservadas <- sum(reservasInfo$Total_Butacas_Reservadas)
reservasInfo_byActo <- as.data.frame(table(reservasInfo$idActoyNombre))
colnames(reservasInfo_byActo) <- c("idActo","freq")
reservasInfo_byActo$Cancelada <-aggregate (Cancelada ~ idActo, data = reservasInfo, sum)[,2]
reservasInfo_byActo$Total_Butacas_Reservadas <-aggregate (Total_Butacas_Reservadas ~ idActo, data = reservasInfo, sum)[,2]
Total_Usuarios <- nlevels(as.factor(reservasInfo$idUsuario))
Listado_Usuarios<- as.data.frame(unique(reservasInfo$idUsuario))
colnames(Listado_Usuarios) <- "idUsuario"
usuarios_con_reserva <- merge(Listado_Usuarios, usuarios, by.Listado_Usuarios='idUsuario',by.usuarios='idUsuario',
all.Listado_Usuarios=TRUE)
usuarios <- sqlQuery(odbcChannel, "select * from informes.vw_Usuarios") #usuarios
usuarios_con_reserva <- merge(Listado_Usuarios, usuarios, by.Listado_Usuarios='idUsuario',by.usuarios='idUsuario',
all.Listado_Usuarios=TRUE)
summary(as.factor(months(usuarios$fechaAlta)))
usuarios_sin_reserva <- subset(usuarios, !is.na(usuarios$fechaAlta))
usuarios_sin_reserva <- merge (Listado_Usuarios,usuarios_sin_reserva)
View(usuarios_sin_reserva)
View(Listado_Usuarios)
usuarios_con_reserva <- merge(Listado_Usuarios, usuarios, by.Listado_Usuarios='idUsuario',by.usuarios='idUsuario',
all.Listado_Usuarios=TRUE)
usuarios_sin_reserva <- subset(usuarios, !is.na(usuarios$fechaAlta))
usuarios_sin_reserva <- merge (usuarios_con_reserva,usuarios_sin_reserva)
summary(as.factor(months(usuarios$fechaAlta)))
summary(as.factor(months(usuarios$fechaAlta)))
summary(as.factor(months(usuarios_con_reserva$fechaAlta)))
View(usuarios_con_reserva)
View(usuarios_sin_reserva)
View(usuarios_sin_reserva)
usuarios_con_reserva <- usuarios_con_reserva[order(idUsuario),]
usuarios_con_reserva <- usuarios_con_reserva[order(usuarios_con_reserva$idUsuario),]
usuarios_sin_reserva <- usuarios_sin_reserva[order(usuarios_sin_reserva$idUsuario),]
View(usuarios_con_reserva)
View(usuarios_sin_reserva)
usuarios_sin_reserva <- usuarios
summary(as.factor(months(usuarios$fechaAlta)))
usuarios_sin_reserva <- merge (usuarios_con_reserva,usuarios_sin_reserva)
summary(as.factor(months(usuarios_sin_reserva$fechaAlta)))
summary(as.factor(months(usuarios_con_reserva$fechaAlta)))
usuarios_sin_reserva <- subset(usuarios, !is.na(usuarios$fechaAlta))
usuarios_sin_reserva <- merge (usuarios_con_reserva,usuarios_sin_reserva)
summary(as.factor(months(usuarios_sin_reserva$fechaAlta)))
library(RODBC)
# Conexión con SQL Server utilizando OCDBC
odbcChannel <- odbcConnect("Reservas")
odbcGetInfo(odbcChannel)
p <- sqlQuery(odbcChannel, "select * from information_schema.tables") # todas las tablas
## RESERVAS-----------------------------------------------------------------------------------------------------
# Sacamos datos de reservas
reservasInfo <- sqlQuery(odbcChannel, "select * from reservas.vw_Todas_Las_Reservas") # reservas info
# Limpiamos los datos de reservas
reservasInfo <- reservasInfo[,c(1,2,4,5,6,7,8,9,14,27,28)]
# Juntamos idActo y Nombre para las agrupaciones posteriores
reservasInfo$idActoyNombre <- paste(reservasInfo$idActo,"-",reservasInfo$Acto_Nombre)
# Filtramos por fecha
reservasInfo <- reservasInfo [ order(reservasInfo$Acto_Fecha, decreasing=TRUE),]
reservasInfo <- subset (reservasInfo, Reserva_Fecha < as.POSIXct("2014-12-01 00:00:00"))
reservasInfo <- subset (reservasInfo, Acto_Fecha < as.POSIXct("2014-12-01 00:00:00"))
Total_Actos <- nlevels(as.factor(reservasInfo$idActo))
#Total Butacas Reservadas
Total_Butacas_Reservadas <- sum(reservasInfo$Total_Butacas_Reservadas)
#Total Cancelaciones
Total_Cancelaciones <- sum(reservasInfo$Cancelada)
#Distribución de las reservas por meses
table(months(reservasInfo$Reserva_Fecha))
reservasInfo_byActo <- as.data.frame(table(reservasInfo$idActoyNombre))
colnames(reservasInfo_byActo) <- c("idActo","freq")
reservasInfo_byActo$Cancelada <-aggregate (Cancelada ~ idActo, data = reservasInfo, sum)[,2]
reservasInfo_byActo$Total_Butacas_Reservadas <-aggregate (Total_Butacas_Reservadas ~ idActo, data = reservasInfo, sum)[,2]
Total_Usuarios <- nlevels(as.factor(reservasInfo$idUsuario))
Listado_Usuarios<- as.data.frame(unique(reservasInfo$idUsuario))
colnames(Listado_Usuarios) <- "idUsuario"
View(Listado_Usuarios)
Listado_Usuarios <- Listado_Usuarios[order(Listado_Usuarios$idUsuario),]
Listado_Usuarios <- as.data.frame(Listado_Usuarios[order(Listado_Usuarios$idUsuario),])
Listado_Usuarios <-as.data.frame(Listado_Usuarios)
View(Listado_Usuarios)
colnames(Listado_Usuarios) <- "idUsuario"
View(Listado_Usuarios)
usuarios <- sqlQuery(odbcChannel, "select * from informes.vw_Usuarios") #usuarios
usuarios_con_reserva <- merge(Listado_Usuarios, usuarios, by.Listado_Usuarios='idUsuario',by.usuarios='idUsuario',
all.Listado_Usuarios=TRUE)
View(usuarios_con_reserva)
usuarios <- sqlQuery(odbcChannel, "select * from informes.vw_Usuarios") #usuarios
library(RODBC)
# Conexión con SQL Server utilizando OCDBC
odbcChannel <- odbcConnect("Reservas")
odbcGetInfo(odbcChannel)
usuarios <- sqlQuery(odbcChannel, "select * from informes.vw_Usuarios") #usuarios
summary(as.factor(months(usuarios$fechaAlta)))
install.packages("knitr")
library("knitr", lib.loc="\\srvdisco/FUsuarios/Biblioteca/lmartinez/R/win-library/3.0")
library("knitr")
library("knitr", lib.loc="\\\\srvdisco/FUsuarios/Biblioteca/lmartinez/R/win-library/3.0")
install.packages("evaluate")
install.packages("twitteR")
install.packages("ROAuth")
install.packages("RCurl")
library(twitteR)
library(ROAuth)
library(RCurl)
library("XML")
library("twitteR")
library("ROAuth")
library("RCurl")
install.packages("ROAuth")
install.packages("ROAuth")
library("ROAuth", lib.loc="\\srvdisco/FUsuarios/Biblioteca/lmartinez/R/win-library/3.0")
library("ROAuth", lib.loc="\\\\srvdisco/FUsuarios/Biblioteca/lmartinez/R/win-library/3.0")
library("ROAuth", lib.loc="\\\\srvdisco//FUsuarios//Biblioteca//lmartinez//R//win-library//3.0")
library(XML)
install.packages("XML")
library(XML)
mps <- paste("http://resultados.elpais.com/elecciones/2011/municipales/12/28/127.html",sep="")
mps.doc <- htmlParse(mps, encoding="UTF-8")
Partido <- xpathSApply(mps.doc,"//th[@class='nombrePartido']/",xmlValue)
Partido <- xpathSApply(mps.doc,"//th[@class='nombrePartido']",xmlValue)
Concejales <- xpathSApply(mps.doc,"//th[@class='tipoNumeroElectos']",xmlValue)
Votos <- xpathSApply(mps.doc,"//th[@class='tipoNumeroVotos']",xmlValue)
Concejales <- xpathSApply(mps.doc,"//td[@class='tipoNumeroElectos']",xmlValue)
Votos <- xpathSApply(mps.doc,"//td[@class='tipoNumeroVotos']",xmlValue)
eleccion <- cbind (Partido,url,Concejales,Votos)
View(eleccion)
eleccion <- cbind (Partido,Concejales,Votos)
View(eleccion)
View(eleccion)
eleccion <- as.data.frame(eleccion)
library("plyr")
library("plyr")
library("reshape")
install.packages("reshape")
library("reshape")
Reservas_Actos <-  read.csv("~/1.Documents/Library/OCD-Data Science/6. Management/Reservas/datos/Reservas_Acto_26_Feb_2015.csv",sep=";")
View(Reservas_Actos)
Reservas_Actos <- unique(Reservas_Actos)
Actos.Feb.2015 <- read.delim("~/1.Documents/Library/OCD-Data Science/6. Management/Reservas/datos/Actos Feb 2015.txt")
View(Reservas_Actos)
View(Actos.Feb.2015)
Actos.Feb.2015 <- Actos.Feb.2015 [,c(1,5)]
View(Actos.Feb.2015)
colnames(Reservas_Actos)
colnames(Reservas_Actos)[1]
colnames(Reservas_Actos)[1]="idActo"
colnames(Reservas_Actos)
colnames(Actos.Feb.2015)[1]="idActo"
Reservas_Actos <- merge(Reservas_Actos, Actos.Feb.2015, by.Reservas_Actos='idActo',by.Actos.Feb.2015='idActo', all.Reservas_Actos=TRUE)
View(Reservas_Actos)
lapply(Reservas_Actos, class)
summary(Reservas_Actos$formato)
Reservas_Actos_Fechas <- strptime(as.character(Reservas_Actos[,2]), format="%d/%m/%Y %H:%M")
Reservas_Actos_Fechas
Reservas_Actos$Acto_Fecha2 <- strptime(as.character(Reservas_Actos[,2]), format="%d/%m/%Y %H:%M")
Reservas_Actos$Dia <- Reservas_Actos_Fechas$wday
Reservas_Actos <- subset (Reservas_Actos, Acto_Fecha2 < as.POSIXct("2015-02-26 00:00:00"))
Reservas_Actos <- Reservas_Actos [ order(Reservas_Actos$Acto_Fecha2, decreasing=TRUE),]
View(Reservas_Actos)
rm(Actos.Feb.2015)
Reservas_Actos <-  read.csv("~/1.Documents/Library/OCD-Data Science/6. Management/Reservas/datos/Reservas_Acto_26_Feb_2015.csv",sep=";")
Reservas_Actos <- unique(Reservas_Actos)
colnames(Reservas_Actos)[1]="idActo"
Actos.Feb.2015 <- read.delim("~/1.Documents/Library/OCD-Data Science/6. Management/Reservas/datos/Actos Feb 2015.txt")
Actos.Feb.2015 <- Actos.Feb.2015 [,c(1,5)]
colnames(Actos.Feb.2015)[1]="idActo"
Reservas_Actos <- merge(Reservas_Actos, Actos.Feb.2015, by.Reservas_Actos='idActo',by.Actos.Feb.2015='idActo', all.Reservas_Actos=TRUE)
Reservas_Actos <-  read.csv("~/1.Documents/Library/OCD-Data Science/6. Management/Reservas/datos/Reservas_Acto_26_Feb_2015.csv",sep=";")
Reservas_Actos <- unique(Reservas_Actos)
colnames(Reservas_Actos)[1]="idActo"
Actos.Feb.2015 <- read.delim("~/1.Documents/Library/OCD-Data Science/6. Management/Reservas/datos/Actos Feb 2015.txt")
Actos.Feb.2015 <- Actos.Feb.2015 [,c(1,5)]
colnames(Actos.Feb.2015)[1]="idActo"
Reservas_Actos <- Reservas_Actos [ order(Reservas_Actos$idActo, decreasing=TRUE),]
View(Reservas_Actos)
Actos.Feb.2015 <- Actos.Feb.2015 [ order(Actos.Feb.2015$idActo, decreasing=TRUE),]
View(Actos.Feb.2015)
View(Actos.Feb.2015)
Actos.Feb.2015 <- read.delim("~/1.Documents/Library/OCD-Data Science/6. Management/Reservas/datos/Actos Feb 2015.txt")
View(Actos.Feb.2015)
View(Actos.Feb.2015)
Actos.Feb.2015 <- Actos.Feb.2015 [,c(1,5)]
View(Actos.Feb.2015)
View(Actos.Feb.2015)
colnames(Actos.Feb.2015)[1]="idActo"
View(Actos.Feb.2015)
Actos.Feb.2015$idActo <- as.numeric(Actos.Feb.2015$idActo)
Actos.Feb.2015$idActo <- as.integer(Actos.Feb.2015$idActo)
Actos.Feb.2015 <- Actos.Feb.2015 [ order(Actos.Feb.2015$idActo, decreasing=TRUE),]
View(Actos.Feb.2015)
View(Reservas_Actos)
Actos.Feb.2015 <- read.delim("~/1.Documents/Library/OCD-Data Science/6. Management/Reservas/datos/Actos Feb 2015.txt")
Actos.Feb.2015 <- Actos.Feb.2015 [,c(1,5)]
colnames(Actos.Feb.2015)[1]="idActo"
Actos.Feb.2015$idActo <- as.integer(Actos.Feb.2015$idActo)
View(Actos.Feb.2015)
Actos.Feb.2015 <- read.delim("~/1.Documents/Library/OCD-Data Science/6. Management/Reservas/datos/Actos Feb 2015.txt")
tail(Actos.Feb.2015)
Actos.Feb.2015[4393,]
Actos.Feb.2015[4393,1]
Actos.Feb.2015[1,4393]
Actos.Feb.2015[1,4392]
Actos.Feb.2015[4392,1]
Actos.Feb.2015[4392,2]
Actos.Feb.2015[4392,3]
Actos.Feb.2015 <- read.delim("~/1.Documents/Library/OCD-Data Science/6. Management/Reservas/datos/Actos Feb 2015.txt")
colnames(Actos.Feb.2015)[1]="idActo"
Reservas_Actos <- merge(Reservas_Actos, Actos.Feb.2015, by.Reservas_Actos='idActo',by.Actos.Feb.2015='idActo', all.Reservas_Actos=TRUE)
View(Reservas_Actos)
View(Reservas_Actos)
Reservas_Actos <- unique(Reservas_Actos)
rm(Actos.Feb.2015)
Reservas_Actos_Fechas <- strptime(as.character(Reservas_Actos[,2]), format="%d/%m/%Y %H:%M")
Reservas_Actos$Acto_Fecha2 <- strptime(as.character(Reservas_Actos[,2]), format="%d/%m/%Y %H:%M")
Reservas_Actos$Dia <- Reservas_Actos_Fechas$wday
rm(Reservas_Actos_Fechas)
Reservas_Actos <- subset (Reservas_Actos, Acto_Fecha2 < as.POSIXct("2015-02-26 00:00:00"))
Reservas_Actos <- Reservas_Actos [ order(Reservas_Actos$Acto_Fecha2, decreasing=TRUE),]
table(months(Reservas_Actos$Acto_Fecha2))
Reservas_Actos = transform(Reservas_Actos, FOO=colsplit(Reservas_Actos$Duracion,':', names=c('Horas','Minutos','cs')))
Reservas_Actos = transform(Reservas_Actos, FOO=colsplit(Reservas_Actos$Duracion.,':', names=c('Horas','Minutos','cs')))
Reservas_Actos = transform(Reservas_Actos, FOO=colsplit(Reservas_Actos$DuraciÃ³n.,':', names=c('Horas','Minutos','cs')))
View(Reservas_Actos)
Reservas_Actos$Minutos <- Reservas_Actos$FOO.Horas *60 + Reservas_Actos$FOO.Minutos
View(Reservas_Actos)
Reservas_Actos <- Reservas_Actos [order(Reservas_Actos$Minutos),]
View(Reservas_Actos)
Tiempo_medio_reserva <- mean(Reservas_Actos$Minutos)/60
barplot(table(Reservas_Actos$Minutos),
main="Reservas_Actos$Minutos")
Reservas_Actos$MinCat[Reservas_Actos$Minutos <10] <- "Menos de 10 minutos"
Reservas_Actos$MinCat[Reservas_Actos$Minutos>=10 & Reservas_Actos$Minutos <60 ] <- "Entre 10 y 60 minutos"
Reservas_Actos$MinCat[Reservas_Actos$Minutos>=60 & Reservas_Actos$Minutos <1440 ] <- "Entre 1 y 24 horas"
Reservas_Actos$MinCat[Reservas_Actos$Minutos >=1440] <- "Mas de un día"
MinCat.freq <- table(Reservas_Actos$MinCat)
MinCat.freq <- as.data.frame(MinCat.freq) # "as.data.frame" intenta convertir en un data.frame
valores <- MinCat.freq[,2]
etiquetas <- MinCat.freq[,1]
pie(valores,
labels = etiquetas,
main="Duración de las reservas")
View(MinCat.freq)
rm(MinCat.freq,etiquetas,valores)
class(Reservas_Actos$Reservadas)
summary(Reservas_Actos$Reservadas)
barplot(table(Reservas_Actos$Reservadas),
main="Reservas_Actos$Reservadas")
Reservas_Actos$ReservadasTodas[Reservas_Actos$Reservadas == 83] <- "Todas reservadas"
Reservas_Actos$ReservadasTodas[Reservas_Actos$Reservadas!= 83] <- "No reservadas totalmente"
summary(as.factor(Reservas_Actos$ReservadasTodas))
Reservas_Actos <- Reservas_Actos [order(-Reservas_Actos$No.Recogidas),]
class(Reservas_Actos$No.Recogidas)
summary(Reservas_Actos$No.Recogidas)
sum(Reservas_Actos$No.Recogidas, na.rm=TRUE)
Reservas_Actos <- Reservas_Actos [order(-Reservas_Actos$No.Recogidas),]
View(Reservas_Actos)
class(Reservas_Actos$Canceladas)
summary(Reservas_Actos$Canceladas)
sum(Reservas_Actos$Canceladas, na.rm=TRUE)
Reservas_Actos <- Reservas_Actos [order(-Reservas_Actos$Canceladas),]
View(Reservas_Actos)
ActosByDay <- as.data.frame(table(Reservas_Actos$Dia))
ActosByDay$Minutos <-aggregate (Minutos ~ Dia, data = Reservas_Actos, mean)[,2]
ActosByDay$Reservadas <-aggregate (Reservadas ~ Dia, data = Reservas_Actos, mean)[,2]
ActosByDay$No.recogidas <-aggregate (No.Recogidas ~ Dia, data = Reservas_Actos, mean)[,2]
ActosByDay$Canceladas <-aggregate (Canceladas ~ Dia, data = Reservas_Actos, mean)[,2]
View(ActosByDay)
ActosByType <- as.data.frame(table(Reservas_Actos$nombreFormatoES))
ActosByType$Minutos <-aggregate (Minutos ~ nombreFormatoES, data = Reservas_Actos, mean)[,2]
ActosByType$Reservadas <-aggregate (Reservadas ~ nombreFormatoES, data = Reservas_Actos, mean)[,2]
ActosByType$No.recogidas <-aggregate (No.Recogidas ~ nombreFormatoES, data = Reservas_Actos, mean)[,2]
ActosByType$Canceladas <-aggregate (Canceladas ~ nombreFormatoES, data = Reservas_Actos, mean)[,2]
ActosByType <- as.data.frame(table(Reservas_Actos$formato))
ActosByType$Minutos <-aggregate (Minutos ~ formato, data = Reservas_Actos, mean)[,2]
ActosByType$Reservadas <-aggregate (Reservadas ~ formato, data = Reservas_Actos, mean)[,2]
ActosByType$No.recogidas <-aggregate (No.Recogidas ~ formato, data = Reservas_Actos, mean)[,2]
ActosByType$Canceladas <-aggregate (Canceladas ~ formato, data = Reservas_Actos, mean)[,2]
View(ActosByType)
ActosByFormat <- subset(as.data.frame(table(Reservas_Actos$formato)),Freq>0)
ActosByFormat$Minutos <-aggregate (Minutos ~ formato, data = Reservas_Actos, mean)[,2]
ActosByFormat$Minutos <- ActosByFormat$Minutos/60
ActosByFormat$Reservadas <-aggregate (Reservadas ~ formato, data = Reservas_Actos, mean)[,2]
ActosByFormat$No.recogidas <-aggregate (No.Recogidas ~ formato, data = Reservas_Actos, mean)[,2]
ActosByFormat$Cancelaciones <-aggregate (Cancelaciones ~ formato, data = Reservas_Actos, mean)[,2]
ActosByFormat <- subset(as.data.frame(table(Reservas_Actos$formato)),Freq>0)
ActosByFormat$Minutos <-aggregate (Minutos ~ formato, data = Reservas_Actos, mean)[,2]
ActosByFormat$Minutos <- ActosByFormat$Minutos/60
ActosByFormat$Reservadas <-aggregate (Reservadas ~ formato, data = Reservas_Actos, mean)[,2]
ActosByFormat$No.recogidas <-aggregate (No.Recogidas ~ formato, data = Reservas_Actos, mean)[,2]
ActosByFormat$Cancelaciones <-aggregate (Canceladas ~ formato, data = Reservas_Actos, mean)[,2]
View(ActosByFormat)
Reservas_Usuarios <- read.csv("~/1.Documents/Library/OCD-Data Science/6. Management/Reservas/datos/Reservas_Usuarios_26_Feb_2015.csv", sep=";")
View(Reservas_Usuarios)
View(Reservas_Usuarios)
Reservas_Usuarios <- subset(Reservas_Usuarios, Reservas_Usuarios$Total_Reservas>0)
Reservas_Usuarios$Nacimiento[Reservas_Usuarios$Nacimiento<1920] <-  NA
Reservas_Usuarios$Edad <- 2014 - Reservas_Usuarios$Nacimiento
Reservas_Usuarios$GrupoEdad [Reservas_Usuarios$Edad <35] <- "Menores de 35"
Reservas_Usuarios$GrupoEdad [Reservas_Usuarios$Edad >=35 & Reservas_Usuarios$Edad <60] <- "Entre 35 y 60"
Reservas_Usuarios$GrupoEdad [Reservas_Usuarios$Edad >=60] <- "Mayores de 60"
Nacimiento.frec <- as.data.frame(table(Reservas_Usuarios$GrupoEdad))
barplot(table(Reservas_Usuarios$GrupoEdad),
main="Grupos de Edad")
View(Nacimiento.frec)
class(Reservas_Usuarios$Total_Reservas)
summary(Reservas_Usuarios$Total_Reservas)
max_reservas<- max(Reservas_Usuarios$Total_Reservas)
total_reservas <- sum(Reservas_Usuarios$Total_Reservas)
Reservas.frec <- as.data.frame(table(Reservas_Usuarios$Total_Reservas))
View(Reservas_Usuarios)
View(Reservas.frec)
View(Reservas.frec)
barplot(table(Reservas_Usuarios$Total_Reservas),
main="Total Reservas")
Reservas_Usuarios$ResCat[Reservas_Usuarios$Total_Reservas <2] <- "1 reserva"
Reservas_Usuarios$ResCat[Reservas_Usuarios$Total_Reservas>=2 & Reservas_Usuarios$Total_Reservas <5 ] <- "De 2 a 4reservas"
Reservas_Usuarios$ResCat[Reservas_Usuarios$Total_Reservas >=5] <- "Mas de 5 reservas"
summary(as.factor(Reservas_Usuarios$ResCat))
class(Reservas_Usuarios$Total_Butacas_Reservadas)
summary(Reservas_Usuarios$Total_Butacas_Reservadas)
max_reservas_butacas<- max(Reservas_Usuarios$Total_Butacas_Reservadas, na.rm=TRUE)
total_reservas_butacas<- sum(Reservas_Usuarios$Total_Butacas_Reservadas, na.rm=TRUE)
Reservas.frec <- as.data.frame(table(Reservas_Usuarios$Total_Butacas_Reservadas))
View(Reservas.frec)
View(Reservas.frec)
class(Reservas_Usuarios$Reservas_Canceladas)
summary(Reservas_Usuarios$Reservas_Canceladas)
max_reservas_butacas_canceladas<- max(Reservas_Usuarios$Reservas_Canceladas, na.rm=TRUE)
total_reservas_butacas_canceladas<- sum(Reservas_Usuarios$Reservas_Canceladas, na.rm=TRUE)
Reservas.frec <- as.data.frame(table(Reservas_Usuarios$Reservas_Canceladas))
barplot(table(Reservas_Usuarios$Reservas_Canceladas),
main="Total Reservas Canceladas")
class(Reservas_Usuarios$Total_Butacas_No_Recogidas3)
summary(Reservas_Usuarios$Total_Butacas_No_Recogidas3)
max_butacas_no_recogidas<- max(Reservas_Usuarios$Total_Butacas_No_Recogidas3, na.rm=TRUE)
total_butacas_no_recogidas<- sum(Reservas_Usuarios$Total_Butacas_No_Recogidas3, na.rm=TRUE)
Reservas.frec <- as.data.frame(table(Reservas_Usuarios$Total_Butacas_No_Recogidas3))
barplot(table(Reservas_Usuarios$Total_Butacas_No_Recogidas3),
main="Total_Butacas_No_Recogidas2")
library(RODBC)
install.packages("RODBC")
library(RODBC)
odbcChannel <- odbcConnect("Reservas")
odbcGetInfo(odbcChannel)
p <- sqlQuery(odbcChannel, "select * from information_schema.tables") # todas las tablas
reservasInfo <- sqlQuery(odbcChannel, "select * from reservas.vw_Todas_Las_Reservas") # reservas info
reservasInfo <- reservasInfo[,c(1,2,4,5,6,7,8,9,14,27,28)]
reservasInfo$idActoyNombre <- paste(reservasInfo$idActo,"-",reservasInfo$Acto_Nombre)
reservasInfo <- reservasInfo [ order(reservasInfo$Acto_Fecha, decreasing=TRUE),]
reservasInfo <- subset (reservasInfo, Reserva_Fecha < as.POSIXct("2015-02-26 00:00:00"))
reservasInfo <- subset (reservasInfo, Acto_Fecha < as.POSIXct("2014-02-26 00:00:00"))
Total_Actos <- nlevels(as.factor(reservasInfo$idActo))
Total_Actos
reservasInfo <- sqlQuery(odbcChannel, "select * from reservas.vw_Todas_Las_Reservas") # reservas info
reservasInfo <- reservasInfo[,c(1,2,4,5,6,7,8,9,14,27,28)]
View(reservasInfo)
View(reservasInfo)
reservasInfo <- reservasInfo [ order(reservasInfo$Acto_Fecha, decreasing=TRUE),]
View(reservasInfo)
reservasInfo <- reservasInfo [ order(reservasInfo$Acto_Fecha, decreasing=FALSE),]
View(reservasInfo)
reservasInfo <- subset (reservasInfo, Reserva_Fecha < as.POSIXct("2015-02-26 00:00:00"))
reservasInfo <- subset (reservasInfo, Acto_Fecha < as.POSIXct("2014-02-26 00:00:00"))
reservasInfo <- sqlQuery(odbcChannel, "select * from reservas.vw_Todas_Las_Reservas") # reservas info
# Limpiamos los datos de reservas
reservasInfo <- reservasInfo[,c(1,2,4,5,6,7,8,9,14,27,28)]
# Juntamos idActo y Nombre para las agrupaciones posteriores
reservasInfo$idActoyNombre <- paste(reservasInfo$idActo,"-",reservasInfo$Acto_Nombre)
# Filtramos por fecha
reservasInfo <- reservasInfo [ order(reservasInfo$Acto_Fecha, decreasing=TRUE),]
reservasInfo <- subset (reservasInfo, Reserva_Fecha < as.POSIXct("2015-02-26 00:00:00"))
reservasInfo <- subset (reservasInfo, Acto_Fecha < as.POSIXct("2015-02-26 00:00:00"))
Total_Actos <- nlevels(as.factor(reservasInfo$idActo))
Total_Butacas_Reservadas <- sum(reservasInfo$Total_Butacas_Reservadas)
#Total Cancelaciones
Total_Cancelaciones <- sum(reservasInfo$Cancelada)
#Distribución de las reservas por meses
table(months(reservasInfo$Reserva_Fecha))
reservasInfo_byActo <- as.data.frame(table(reservasInfo$idActoyNombre))
colnames(reservasInfo_byActo) <- c("idActo","freq")
reservasInfo_byActo$Cancelada <-aggregate (Cancelada ~ idActo, data = reservasInfo, sum)[,2]
reservasInfo_byActo$Total_Butacas_Reservadas <-aggregate (Total_Butacas_Reservadas ~ idActo, data = reservasInfo, sum)[,2]
View(reservasInfo_byActo)
Total_Usuarios <- nlevels(as.factor(reservasInfo$idUsuario))
Listado_Usuarios<- as.data.frame(unique(reservasInfo$idUsuario))
colnames(Listado_Usuarios) <- "idUsuario"
Listado_Usuarios <- Listado_Usuarios[order(Listado_Usuarios$idUsuario),]
Listado_Usuarios <-as.data.frame(Listado_Usuarios)
colnames(Listado_Usuarios) <- "idUsuario"
usuarios <- sqlQuery(odbcChannel, "select * from informes.vw_Usuarios") #usuarios
usuarios_con_reserva <- merge(Listado_Usuarios, usuarios, by.Listado_Usuarios='idUsuario',by.usuarios='idUsuario',
all.Listado_Usuarios=TRUE)
usuarios_sin_reserva <- subset(usuarios, !is.na(usuarios$fechaAlta))
usuarios_sin_reserva <- merge (usuarios_con_reserva,usuarios_sin_reserva)
summary(as.factor(months(usuarios$fechaAlta)))
summary(as.factor(months(usuarios_sin_reserva$fechaAlta)))
summary(as.factor(months(usuarios_con_reserva$fechaAlta)))
library(datasets)
head(faithful)
duracion = faithful$eruptions
range(duracion)
hist(duracion,right=FALSE)
colors = c("red", "yellow", "green", "violet", "orange", "blue", "pink", "cyan")
hist(duracion, right=FALSE, col=colors,main="Erupciones del Old Faithful Eruptions", xlab="Duración en minutos")
espera = faithful$waiting
plot(duracion, espera,  xlab="Duración erupción",ylab="Tiempo de espera")
abline(lm(espera ~ duracion))
mean(duracion)
median(duracion)
boxplot(duracion, horizontal=TRUE)
library(twitteR)
library(ROAuth)
library(RCurl)
library("XML")
require(RJSONIO)
getTwitterOAuth("67IaqEiVY5pGvBfybvK22g", "nvbCMgRwyFFbwNjSXqUZHzpGlGAhjQ6FgIMadQVI")
registerTwitterOAuth(oauth)
?setup_twitter_oauth
setup_twitter_oauth("67IaqEiVY5pGvBfybvK22g", "nvbCMgRwyFFbwNjSXqUZHzpGlGAhjQ6FgIMadQVI", access_token=NULL, access_secret=NULL)
tweets = searchTwitter("fundacion juan march")
registerTwitterOAuth(oauth)
setup_twitter_oauth("67IaqEiVY5pGvBfybvK22g", "nvbCMgRwyFFbwNjSXqUZHzpGlGAhjQ6FgIMadQVI", access_token=NULL, access_secret=NULL)
library(twitteR)
library(ROAuth)
library(RCurl)
library("XML")
require(RJSONIO)
getTwitterOAuth("67IaqEiVY5pGvBfybvK22g", "nvbCMgRwyFFbwNjSXqUZHzpGlGAhjQ6FgIMadQVI")
setup_twitter_oauth("67IaqEiVY5pGvBfybvK22g", "nvbCMgRwyFFbwNjSXqUZHzpGlGAhjQ6FgIMadQVI", access_token=NULL, access_secret=NULL)
setup_twitter_oauth("67IaqEiVY5pGvBfybvK22g", "nvbCMgRwyFFbwNjSXqUZHzpGlGAhjQ6FgIMadQVI", access_token=" 216755577-DDu4onBuXAfSb8D1Rq2K1GANSIYO8Sxvn9MDWUnM", access_secret="rEUwTOutlQTyF9T3uxtYcjO77Wrij6mr1vYoAQE29g")
setup_twitter_oauth("67IaqEiVY5pGvBfybvK22g", "nvbCMgRwyFFbwNjSXqUZHzpGlGAhjQ6FgIMadQVI")
getTwitterOAuth("67IaqEiVY5pGvBfybvK22g", "nvbCMgRwyFFbwNjSXqUZHzpGlGAhjQ6FgIMadQVI")
?setup_twitter_oauth
library(httr)
getTwitterOAuth("67IaqEiVY5pGvBfybvK22g", "nvbCMgRwyFFbwNjSXqUZHzpGlGAhjQ6FgIMadQVI")
setup_twitter_oauth("67IaqEiVY5pGvBfybvK22g", "nvbCMgRwyFFbwNjSXqUZHzpGlGAhjQ6FgIMadQVI", access_token=" 216755577-DDu4onBuXAfSb8D1Rq2K1GANSIYO8Sxvn9MDWUnM", access_secret="rEUwTOutlQTyF9T3uxtYcjO77Wrij6mr1vYoAQE29g")
setup_twitter_oauth("67IaqEiVY5pGvBfybvK22g", "nvbCMgRwyFFbwNjSXqUZHzpGlGAhjQ6FgIMadQVI", "216755577-DDu4onBuXAfSb8D1Rq2K1GANSIYO8Sxvn9MDWUnM","rEUwTOutlQTyF9T3uxtYcjO77Wrij6mr1vYoAQE29g")
tweets = searchTwitter("fundacion juan march")
library(twitteR)
library(ROAuth)
library(RCurl)
library("XML")
require(RJSONIO)
library(httr)
setup_twitter_oauth("67IaqEiVY5pGvBfybvK22g", "nvbCMgRwyFFbwNjSXqUZHzpGlGAhjQ6FgIMadQVI", "216755577-DDu4onBuXAfSb8D1Rq2K1GANSIYO8Sxvn9MDWUnM","rEUwTOutlQTyF9T3uxtYcjO77Wrij6mr1vYoAQE29g")
tweets = searchTwitter("fundacion juan march")
tweets = searchTwitter("fundacion juan march", since='2012-01-01', until='2012-12-30')
PodemosTweets = userTimeline("ahorapodemos", n=100)
PodemosTweets <- as.data.frame(PodemosTweets)
PodemosTweetsDB <-twListToDF(PodemosTweets)
PodemosTweetsDBText <- PodemosTweetsDB[1]
View(PodemosTweetsDB)
View(PodemosTweetsDB)
OSRE6tweets = searchTwitter("#OSR6")
OSRE6tweetsDB <-twListToDF(OSRE6tweets)
View(OSRE6tweetsDB)
library(twitteR)
library(ROAuth)
library(httr)
setup_twitter_oauth("67IaqEiVY5pGvBfybvK22g", "nvbCMgRwyFFbwNjSXqUZHzpGlGAhjQ6FgIMadQVI", "216755577-DDu4onBuXAfSb8D1Rq2K1GANSIYO8Sxvn9MDWUnM","rEUwTOutlQTyF9T3uxtYcjO77Wrij6mr1vYoAQE29g")
OSRE6tweets = searchTwitter("#OSR6")
OSRE6tweetsDB <-twListToDF(OSRE6tweets)
PodemosTweets = userTimeline("ahorapodemos", n=100)
PodemosTweetsDB <-twListToDF(PodemosTweets)
PodemosTweetsDBText <- PodemosTweetsDB[1]
write.table(PodemosTweetsDBText, "PodemosTweetsDBText.csv", sep=";")
OSRE6TweetsDBText <- OSRE6TweetsDB[1]
OSRE6TweetsDBText <- OSRE6tweetsDB[1]
setwd("~/1.Documents/Library/OCD-Data Science/Outreach/OSRepositorios2015")
write.table(OSRE6TweetsDBText, "OSRE6TweetsDBText.csv", sep=";")
